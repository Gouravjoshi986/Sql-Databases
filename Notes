Types of Databases 
1. NoSQL Databases = Stored in a schemaless fashion.fast and lean  
eg. MongoDb
2. Graph Databases = stored in graph fashion.  It is used when relationships are important. (need to be stored / Social Media)
eg. Neo4j
3. Vector Databases = Store data in form of vectors . Used widely in ML AI. 
eg. Pinecone
4. SQL Databases = Stores data in form of rows. Most full stack application use this. 
eg. MySQL,Postgres

NO SQL DATABASE PROBLEMS = 
Can lead to inconsistent database
Can cause runtime errors 
Is too flexible for an app that needs strictness
 
Upsides =
Can move very fast
Can change schema very easily

Why SQL = 
SQL databases have a strict schema. They require you to define your schema
Put in data that follows that schema
Update the schema as your app changes and perform migrations

Steps = Run Db , use library to connect , create table and define schema run querries

You can start a Potgres database in a few ways - 
 
1.Using neondb
https://neon.tech/ is a decent service that letâ€™s you create a server. 
Here you will get a postgress connection string

2.Using docker 
docker run --name my-postgres -e POSTGRES_PASSWORD=mysecretpassword -d -p 5432:5432 postgres

// For connecting with the db we can use psql(in built with postgres native) or pg (node library) 

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE users: This command initiates the creation of a new table in the database named users.

SERIAL: A PostgreSQL-specific data type for creating an auto-incrementing integer.
PRIMARY KEY: id column is the primary key for the table, meaning it uniquely identifies each row. Values in this column must be unique and not null.

VARCHAR(50): A variable character string data type that can store up to 50 characters. It's used here to limit the length of the username. 

UNIQUE: This constraint ensures that all values in the username column are unique across the table. No two users can have the same username.

NOT NULL: This constraint prevents null values from being inserted into the username column. Every row must have a username value.

TIMESTAMP WITH TIME ZONE: This data type stores both a timestamp and a time zone, allowing for the precise tracking of when an event occurred, regardless of the user's or server's time zone.

DEFAULT CURRENT_TIMESTAMP: This default value automatically sets the created_at column to the date and time at which the row is inserted into the table, using the current timestamp of the database server.

There are 4 things youâ€™d like to do with a database 
 
1. INSERT
INSERT INTO users (username, email, password)
VALUES ('username_here', 'user@example.com', 'user_password');
ðŸ’¡
2. UPDATE
UPDATE users
SET password = 'new_password'
WHERE email = 'user@example.com';

3. DELETE
DELETE FROM users
WHERE id = 1;

4. Select
SELECT * FROM users
WHERE id = 1;

# You can use postgres via node js library (pg)
import { Client } from "pg"; this is used to import client where you will do your connection and query tasks. 

const client = new Client({
    connectionString:process.env.POSTGRES_STRING
})   using connection string like this
 
and connect with an await 
=>   await client.connect()

and query using tilde
=>   const result = await client.query(`
        CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL
    );
    `)   

client.end()  when the session is over 

//# Security Tip   = You never put the user provided inputs in an database directly. 
As user can send a harmful data which our query will treat as sql commands (SQL injections) that can lead to problems.

We use $1 $2 $3 for user input fields and provide them to the query:
const queryString = `INSERT INTO users (username,email) VALUES ($1,$2)`;
const values = [username,email]
cliend.query(queryString,values); 

// this will treat user inputs as values and not sql commands

#Relationship in SQL   
: Relationships let you store data in different tables and relate it with each other.
 If we have a users table and an address table. and we are using the id of user table as user id of address table (user id is foreign key which refrences id). then we have defined a relationship between both tables 

 # Joins  = 
fetch me a users details and  their address: 

SELECT u.id, u.username, u.email, a.city, a.country, a.street, a.pincode
FROM users u
JOIN addresses a ON u.id = a.user_id
WHERE u.id = YOUR_USER_ID;

For fetching things from two tables and show them in a single tabular format we use joins. 
instead of using two querries. 

// Benefits of using a join - 
Reduced Latency
Simplified Application Logic
Transactional Integrity
 

# Transactions 
Transactions become very important when you want to execute multiple querries together and if any one of them fails then you revert back the querries executed.  
eg.   In an upi transfer two querries occur at the same time one to debit the amount and one to credit the amount if the credit fails then the debited amount should roll back. 
this is achieved via sql transactions. 

Syntax: 
BEGIN; -- Start transaction      client.query('BEGIN')

INSERT INTO users (username, email, password)
VALUES ('john_doe', 'john_doe1@example.com', 'securepassword123');

INSERT INTO addresses (user_id, city, country, street, pincode)
VALUES (currval('users_id_seq'), 'New York', 'USA', '123 Broadway St', '10001');

COMMIT;  -- End Transaction        client.query('COMMIT')

// if any error is catched we use ROLLBACK query to roll the transaction back 
client.query('ROLLBACK')